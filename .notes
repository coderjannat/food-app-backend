// ***** for google authentication PASSPORT JS:
// ------routes->user.js->first of all there should make a route.
// ------utils->provider.js->here i make the strategy which will be used in the route which we made befre.
// the code is-
// import { Strategy as GoogleStrategy } from "passport-google-oauth20";
// import passport from "passport";

// import { application } from "express";

// export const connectPassport = () => {
//   passport.use(
//     new GoogleStrategy(
//       {
//         clientID: "asd",
//         clientSecret: "asd",
//         callbackURL: "asd",
//       },
//       async function (accessToken, refreshToken, profile, done) {
//         //  database comes here
//       }
//     )
//   );
//   passport.serializeUser((user, done) => {
//     done(null, user.id);
//   });

//   passport.deserializeUser(async (id, done) => {
//     // const user = await User.findById(id);
//     done(null, user);
//   });
// }; 


// ----- models->user.js-> here i made the database model which will be used in  povider.js

// ----- utils -> provider.js -> where i previously commented (database comes here), there i added following code--
// async function (accessToken, refreshToken, profile, done) {
//   //  database comes here
//   const user = await User.findOne({
//     googleId: profile.id,
//   });
//   if (!user) {
    //if the user does not exist
  //   const newUser = await User.create({
  //     googleId: profile.id,
  //     name: profile.displayName,
  //     photo: profile.photos[0].value,
  //   });
  //   return done(null, newUser);
  // } else {
    // if the user exist
//     return done(null, user);
//   }
// }
// ------ app.js -> connectPassport function which made in provider.js called in here. This function must be placed after config path and before the importing routes file.

// ------- google - search - google console developer - create new project - just name the project name - click create button - go credential - create credential - click OAuth client id - configure consent screem - click external - create - give the app name , email , lastly again email address - save and continue - click click then back to dashboard click . Again go credential - crate credential - click OAuth client id - application type (web application) - name the app - authorise javascript origins , add url (http://loclhost:4000) - authorised rederict url , add url (http://loclhost:4000/api/v1/login) - create - copy the (client id and client secret)

// ------- config.env - GOOGLE_CLIENT_ID=paste the client id

// GOOGLE_CLIENT_SECRET=paste the client secret id 

// GOOGLE_CALLBACK_URL=http://localhost:4000/api/v1/login

// -------- provider.js - in googlestratagy function   - clientID: process.env.GOOGLE_CLIENT_ID,
        // clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        // callbackURL: process.env.GOOGLE_CALLBACK_URL,

// --------- terminal - cd .\server - npm run dev - in browser type , http://loclhost:4000/api/v1/googlelogin - a google login interface will be shown

// ---------- routes - user.js - make antothe route , after login with google user will go to this route.

// ---------- to make this (/login) route working session must be called . So that-
// app.js - using middleware  session use .

// ---------- in browser type , http://loclhost:4000/api/v1/googlelogin -  a google login interface will be shown - login with email 

// ----------- go mogdb application - connect - go database (fooddb) - the user will stored .
//----------------------------------------------------------------------//


// connecr.sid = this is get from browser. after login go to me (http://loclhost:4000/api/v1/me) then inspect browser - go application - in left side click cookie - click the link below - then in right side - in name - u see connect.sid



//*************  model --> routes --> controllers --> middleware

///------------- model --> routes(order.js) --> controllers(order.js) --> middleware(for making asyncerror functon) --> app.js(express.json, urlencoded added) + importing order route

// ----- for testing the route (/createorder) --> postman used
// ----- mongodb - fooddb - user - copy the object id number - paste it to order (in user object id) - In browser (http://localhost:4000/api/v1/myorders) - u will see the order details


// --------- Creating database in Mongodb --> go google --> search mongodb --> go there website --> login with email --> click connect -- > copy the link --> past it in config(mongo_uri) --> after [true] cut the last part of the  link --> for password , go [database access] than in (new-data) click the edit than get the password, copy this and paste it to the config mongo_uri --> after (mongodb.net/) add the database name --> terminal npm start --> in mongodb automitacally the database will be created.


// ---------- to run the server ---- terminal -> npm start